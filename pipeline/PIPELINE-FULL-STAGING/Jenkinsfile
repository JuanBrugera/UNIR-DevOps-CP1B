#!groovy

def activateEnv = "source jenkins-venv/bin/activate"

pipeline {
    agent any
    options {
        skipDefaultCheckout()
    }
    stages {
        stage('Initial Clean'){
            steps {
                deleteDir()
                sh 'printenv'
            }
        }
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Setup'){
            steps{
                // Setup Virtualenv for testing
                sh """
                python3.8 -m venv jenkins-venv
                $activateEnv
                pip install -U pip
                pip install -r requirements.txt
                """
            }
        }
        stage('Test'){
			steps {
				parallel (
					"Radon": {
					    script {
                            echo 'Make some cool static program analysis wich radon. Is the code enough simple to understand?'
                            def radonOutput = sh (
                                script: "$activateEnv && radon cc src test mytest -n C",
                                returnStdout: true
                                ).trim()
                            if (radonOutput.length() != 0) {
                                echo radonOutput
                                currentBuild.result = 'ABORTED'
                                error("Code's cyclomatic complexity is C or lower in some files!")
                            } else {
                                echo "Nice code!"
                            }
					    }
					},
					"Flake8": {
					    script {
                            echo 'My code has enough quality?'
                            def flak8Output = sh (
                                script: "$activateEnv && flake8 src test mytest",
                                returnStdout: true
                                ).trim()
                            if (flak8Output.length() != 0) {
                                echo flak8Output
                                currentBuild.result = 'ABORTED'
                                error("Code not according to pep8 styling guide")
                            } else {
                                echo "Nice code!"
                            }
					    }
					},
					"Bandit": {
					    script {
                            echo 'Make some security analysis of the code. Is the code secure?'
                            def banditOutput = sh (
                                script: "$activateEnv && bandit -q -lll -r src test mytest",
                                returnStdout: true
                                ).trim()
                            if (banditOutput.length() != 0) {
                                echo banditOutput
                                currentBuild.result = 'ABORTED'
                                error("Code not according to pep8 styling guide")
                            } else {
                                echo "Nice code!"
                            }
					    }
					},
					"Unit": {
						script {
						    echo 'Running Unit Test'
						    def coverageResult = sh (
                                script: """
                                $activateEnv
                                cd mytest
                                coverage run --omit=*jenkins-venv* TestUnit.py
                                coverage report | grep todoTable.py
                                """,
                                returnStdout: true
                                ).trim().tokenize().last().replaceAll('%', '') as Integer
                            if (coverageResult < 80) {
                                currentBuild.result = 'ABORTED'
                                error("todoTable.py coverage is lower than 80%")
                            } else {
                                echo "todoTable.py coverage is ${coverageResult}%. Great Job!"

                            }
						}
					}
				)
			}
        }
        stage('Build') {
            steps {
                // Build release
                sh "sam build"
                // Package release and persist in s3 bucket
                // sh "sam package --template-file template.yaml --output-template-file packaged.yaml --s3-bucket ${env.COUNTRY}-${env.TEAM}-${env.ENVIRONMENT}-${env.SERVICE}-${env.RAND_ID}-artifacts"
                // https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-package.html
                // sam deploy now implicitly performs the functionality of sam package. You can use the sam deploy command directly to package and deploy your application.
            }
        }
        stage('Deploy'){
            steps{
                sh "sam deploy --config-env ${env.ENVIRONMENT}"
            }
        }
        stage('Integration Test'){
            steps{
                // Unittest or pytest
                // Unitary testing -> unittest or pytest against the lambda functions.
                echo 'Testing all methods works fine'
                sh "$activateEnv && pytest mytest/TestIntegration.py"
            }
        }
        stage('Final Clean'){
            steps {
                echo 'Cleaning after deployment...'
                deleteDir()
            }
        }
    }
}